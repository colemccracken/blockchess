/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ChessInterface extends ethers.utils.Interface {
  functions: {
    "blackMovesMapping(uint256,uint256)": FunctionFragment;
    "createGame()": FunctionFragment;
    "getCount()": FunctionFragment;
    "getPGN(uint256)": FunctionFragment;
    "move(uint256,string,string)": FunctionFragment;
    "whiteMovesMapping(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "blackMovesMapping",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPGN",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteMovesMapping",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "blackMovesMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPGN", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteMovesMapping",
    data: BytesLike
  ): Result;

  events: {
    "Move(uint256,address,string,string)": EventFragment;
    "NewGame(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Move"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGame"): EventFragment;
}

export type MoveEvent = TypedEvent<
  [BigNumber, string, string, string],
  { id: BigNumber; from: string; color: string; move: string }
>;

export type MoveEventFilter = TypedEventFilter<MoveEvent>;

export type NewGameEvent = TypedEvent<
  [BigNumber, string],
  { id: BigNumber; from: string }
>;

export type NewGameEventFilter = TypedEventFilter<NewGameEvent>;

export interface Chess extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ChessInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    blackMovesMapping(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    createGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPGN(_gameId: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    move(
      _gameId: BigNumberish,
      _color: string,
      _move: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteMovesMapping(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  blackMovesMapping(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  createGame(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCount(overrides?: CallOverrides): Promise<BigNumber>;

  getPGN(_gameId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  move(
    _gameId: BigNumberish,
    _color: string,
    _move: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteMovesMapping(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    blackMovesMapping(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    createGame(overrides?: CallOverrides): Promise<void>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPGN(_gameId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    move(
      _gameId: BigNumberish,
      _color: string,
      _move: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteMovesMapping(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "Move(uint256,address,string,string)"(
      id?: null,
      from?: null,
      color?: null,
      move?: null
    ): MoveEventFilter;
    Move(id?: null, from?: null, color?: null, move?: null): MoveEventFilter;

    "NewGame(uint256,address)"(id?: null, from?: null): NewGameEventFilter;
    NewGame(id?: null, from?: null): NewGameEventFilter;
  };

  estimateGas: {
    blackMovesMapping(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCount(overrides?: CallOverrides): Promise<BigNumber>;

    getPGN(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    move(
      _gameId: BigNumberish,
      _color: string,
      _move: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteMovesMapping(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    blackMovesMapping(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createGame(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPGN(
      _gameId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    move(
      _gameId: BigNumberish,
      _color: string,
      _move: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteMovesMapping(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
